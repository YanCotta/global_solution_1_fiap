from pydantic import BaseModel, Field
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime

class ThreatEventInput(BaseModel):
    """
    Pydantic model for receiving ThreatEvent data via API.
    event_id is typically generated by the server upon creation.
    timestamp is also typically set by the server.
    """
    subsystem_source: str = Field(..., example="SACI", description="Subsystem that originated the event (e.g., SACI, CURUPIRA).")
    threat_type: str = Field(..., example="wildfire_detection", description="Type of threat detected.")
    severity: float = Field(..., ge=0.0, le=1.0, example=0.75, description="Severity score from 0.0 to 1.0.")
    location: Tuple[float, float] = Field(..., example=(-19.9174, -43.9343), description="Geographic coordinates (latitude, longitude).")
    metadata: Dict[str, Any] = Field(default_factory=dict, example={'temperature': '35C', 'wind_speed': '15km/h'}, description="Additional threat-specific data.")
    confidence_score: Optional[float] = Field(default=1.0, ge=0.0, le=1.0, example=0.95, description="Confidence in the detection (0.0 to 1.0).")
    # origin_sensor_id could also be part of the input if known by the reporter
    origin_sensor_id: Optional[str] = Field(None, example="sensor_alpha_001", description="Specific sensor ID within the subsystem, if applicable.")


class ThreatEventResponse(ThreatEventInput):
    """
    Pydantic model for representing a ThreatEvent in API responses.
    Includes server-generated fields like event_id and timestamp.
    """
    event_id: str = Field(..., example="evt_20231027T103045Z_fire001", description="Unique identifier for the event.")
    timestamp: datetime = Field(..., example=datetime.utcnow(), description="Timestamp of when the event was recorded or occurred.")

    class Config:
        orm_mode = True # if you plan to use this with an ORM

class SubsystemStatus(BaseModel):
    """Status of an individual subsystem."""
    name: str = Field(..., example="SACI", description="Name of the subsystem.")
    status: str = Field(..., example="operational", description="Current operational status.")
    alerts_count: Optional[int] = Field(0, example=5, description="Number of active alerts for this subsystem.")
    last_heartbeat: Optional[datetime] = Field(None, example=datetime.utcnow(), description="Last heartbeat received from the subsystem.")
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Additional status metadata.")


class SystemStatusResponse(BaseModel):
    """
    Pydantic model for the overall system status response.
    """
    overall_status: str = Field(..., example="operational", description="Overall status of Sistema Guardi√£o.")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="Timestamp of when the status was generated.")
    active_threats_count: int = Field(..., example=10, description="Total number of active threats being managed.")
    subsystems: List[SubsystemStatus] = Field(..., description="List of statuses for each subsystem.")


class AlertConfirmationResponse(BaseModel):
    """
    Pydantic model for confirming receipt or processing of an alert/event.
    """
    event_id: Optional[str] = Field(None, example="evt_20231027T103045Z_fire001", description="ID of the event that was processed or reported.")
    status: str = Field(..., example="received", description="Status of the confirmation (e.g., 'received', 'processing_started', 'action_triggered').")
    message: str = Field(..., example="Threat event successfully reported and is being processed.", description="A human-readable message about the confirmation.")
    timestamp: datetime = Field(default_factory=datetime.utcnow)


class SaciManualAlertRequest(BaseModel):
    """
    Pydantic model for manually reporting an alert specific to the SACI subsystem.
    """
    location: Tuple[float, float] = Field(..., example=(-19.9288, -43.9490), description="Geographic coordinates (latitude, longitude) of the manual alert.")
    description: str = Field(..., example="Citizen reported smoke plume near conservation area.", description="Detailed description of the manually reported alert.")
    reported_by: str = Field(..., example="CitizenApp/UserID_12345", description="Source of the manual report (e.g., user ID, system name).")
    urgency: Optional[int] = Field(default=1, ge=1, le=5, example=3, description="Urgency level from 1 (low) to 5 (critical).")
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict, example={'image_url': 'http://example.com/smoke.jpg'}, description="Additional relevant data.")
