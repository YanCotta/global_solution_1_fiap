from pydantic import BaseModel, Field
from typing import List, Dict, Any, Optional, Tuple, Union
from datetime import datetime

class ThreatEventInput(BaseModel):
    """
    Pydantic model for receiving ThreatEvent data via API.
    event_id is typically generated by the server upon creation.
    timestamp is also typically set by the server.
    """
    subsystem_source: str = Field(..., example="SACI", description="Subsystem that originated the event (e.g., SACI, CURUPIRA).")
    threat_type: str = Field(..., example="wildfire_detection", description="Type of threat detected.")
    severity: float = Field(..., ge=0.0, le=1.0, example=0.75, description="Severity score from 0.0 to 1.0.")
    location: Tuple[float, float] = Field(..., example=(-19.9174, -43.9343), description="Geographic coordinates (latitude, longitude).")
    metadata: Dict[str, Any] = Field(default_factory=dict, example={'temperature': '35C', 'wind_speed': '15km/h'}, description="Additional threat-specific data.")
    confidence_score: Optional[float] = Field(default=1.0, ge=0.0, le=1.0, example=0.95, description="Confidence in the detection (0.0 to 1.0).")
    # origin_sensor_id could also be part of the input if known by the reporter
    origin_sensor_id: Optional[str] = Field(None, example="sensor_alpha_001", description="Specific sensor ID within the subsystem, if applicable.")


class ThreatEventResponse(ThreatEventInput):
    """
    Pydantic model for representing a ThreatEvent in API responses.
    Includes server-generated fields like event_id and timestamp.
    """
    event_id: str = Field(..., example="evt_20231027T103045Z_fire001", description="Unique identifier for the event.")
    timestamp: datetime = Field(..., example=datetime.utcnow(), description="Timestamp of when the event was recorded or occurred.")

    class Config:
        orm_mode = True # if you plan to use this with an ORM

class SubsystemStatus(BaseModel):
    """Status of an individual subsystem."""
    name: str = Field(..., example="SACI", description="Name of the subsystem.")
    status: str = Field(..., example="operational", description="Current operational status.")
    alerts_count: Optional[int] = Field(0, example=5, description="Number of active alerts for this subsystem.")
    last_heartbeat: Optional[datetime] = Field(None, example=datetime.utcnow(), description="Last heartbeat received from the subsystem.")
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Additional status metadata.")


class SystemStatusResponse(BaseModel):
    """
    Pydantic model for the overall system status response.
    """
    overall_status: str = Field(..., example="operational", description="Overall status of Sistema Guardião.")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="Timestamp of when the status was generated.")
    active_threats_count: int = Field(..., example=10, description="Total number of active threats being managed.")
    subsystems: List[SubsystemStatus] = Field(..., description="List of statuses for each subsystem.")


class AlertConfirmationResponse(BaseModel):
    """
    Pydantic model for confirming receipt or processing of an alert/event.
    """
    event_id: Optional[str] = Field(None, example="evt_20231027T103045Z_fire001", description="ID of the event that was processed or reported.")
    status: str = Field(..., example="received", description="Status of the confirmation (e.g., 'received', 'processing_started', 'action_triggered').")
    message: str = Field(..., example="Threat event successfully reported and is being processed.", description="A human-readable message about the confirmation.")
    timestamp: datetime = Field(default_factory=datetime.utcnow)


class SaciManualAlertRequest(BaseModel):
    """
    Pydantic model for manually reporting an alert specific to the SACI subsystem.
    """
    location: Tuple[float, float] = Field(..., example=(-19.9288, -43.9490), description="Geographic coordinates (latitude, longitude) of the manual alert.")
    description: str = Field(..., example="Citizen reported smoke plume near conservation area.", description="Detailed description of the manually reported alert.")
    reported_by: str = Field(..., example="CitizenApp/UserID_12345", description="Source of the manual report (e.g., user ID, system name).")
    urgency: Optional[int] = Field(default=1, ge=1, le=5, example=3, description="Urgency level from 1 (low) to 5 (critical).")
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict, example={'image_url': 'http://example.com/smoke.jpg'}, description="Additional relevant data.")


# New Models for Dashboard Support - Added based on Step 5 requirements

# 1. EventDetailsResponse Model
class EventDetailsInformacoesBasicas(BaseModel):
    event_id: str = Field(..., example="SACI-2025060601-001")
    timestamp: datetime # Field(..., example="2025-06-01 14:23:45 BRT") # Example will be shown by FastAPI
    subsistema_origem: str = Field(..., alias="subsistema", example="SACI") # Matching dashboard spec
    tipo_ameaca: str = Field(..., alias="tipo_evento", example="Risco Alto de Incêndio") # Matching dashboard spec
    severidade_atual: str = Field(..., alias="severidade", example="ALTO") # Matching dashboard spec
    localizacao_precisa: Tuple[float, float] = Field(..., alias="coordenadas", example=(-23.5505, -46.6333))
    endereco_aproximado: Optional[str] = Field(None, alias="endereco", example="Parque Ibirapuera, São Paulo - SP")
    status_evento: Optional[str] = Field(None, example="Ativo")


class EventDetailsDetalhesTecnicos(BaseModel):
    dados_sensores_relevantes: Optional[Union[Dict[str, Any], str]] = Field(None, example="SACI-SP-IBR-001") # Simplified to match example if complex object not needed
    assinaturas_detectadas: Optional[str] = Field(None, alias="assinaturas_detectadas", example="94.2%") # Updated alias to match dashboard spec
    modelos_preditivos_usados: Optional[str] = Field(None, alias="correlacao_historica", example="12 eventos similares") # Re-alias for clarity
    fatores_contribuintes: Optional[Dict[str, str]] = Field(None, example={"temperatura": "32.5°C (+8°C normal)", "umidade": "25% (-40% normal)"})


class EventDetailsImpactoEstimado(BaseModel):
    impacto_populacao: Optional[str] = Field(None, alias="populacao_em_risco", example="~45.000 pessoas")
    impacto_infraestrutura: Optional[str] = Field(None, alias="infraestrutura_critica", example="Hospital Sírio-Libanês")
    impacto_ambiental: Optional[str] = Field(None, example="Risco para área de preservação adjacente")
    impacto_economico: Optional[str] = Field(None, example="Potencial interrupção de atividades comerciais locais")
    propagacao_risco_potencial: Optional[str] = Field(None, alias="raio_afetado", example="2.5 km")
    tempo_resposta_necessario: Optional[str] = Field(None, example="< 15 minutos")


class EventDetailsAcoesSugeridas(BaseModel):
    protocolos_recomendados: Optional[str] = Field(None, alias="primaria", example="Notificar Corpo de Bombeiros")
    recursos_necessarios: Optional[str] = Field(None, alias="secundaria", example="Ativar protocolo evacuação preventiva")
    comunicacoes_estrategicas: Optional[str] = Field(None, alias="preventiva", example="Aumentar monitoramento área adjacente")

class EventDetailsResponse(BaseModel):
    informacoes_basicas: EventDetailsInformacoesBasicas
    detalhes_tecnicos: EventDetailsDetalhesTecnicos
    impacto_estimado: EventDetailsImpactoEstimado
    acoes_sugeridas: EventDetailsAcoesSugeridas

# 2. SubsystemKpiResponse Model
class KpiPrincipal(BaseModel):
    metrica: str = Field(..., example="Índice de Risco de Incêndio Agregado")
    valor: str = Field(..., example="0.85") # Can be float or string for flexibility
    tendencia: str = Field(..., example="Aumentando") # e.g., "estavel", "melhorando", "piorando"

class SubsystemKpiResponse(BaseModel):
    # subsistema_nome: str = Field(..., example="SACI") # This will be part of the path, not response body
    indicador_visual: str = Field(..., example="vermelho")
    status_operacional: str = Field(..., example="Alerta Elevado")
    alertas_ativas: int = Field(..., example=12)
    kpi_principal: KpiPrincipal
    ultima_atualizacao: datetime
    detalhes_degradacao: Optional[str] = Field(None, example="Alguns sensores offline na Zona Oeste")

# 3. HeatmapDataPoint Models

# SACI Heatmap
class SaciHeatmapDataPoint(BaseModel):
    geolocalizacao: Tuple[float, float] = Field(..., example=(-19.9174, -43.9343))
    risco_incendio_score: float = Field(..., example=0.92, ge=0.0, le=1.0)
    direcao_vento_predominante: Optional[str] = Field(None, example="NNE")
    umidade_relativa_media: Optional[float] = Field(None, example=25.5)
    temperatura_media: Optional[float] = Field(None, example=32.5)


class SaciHeatmapResponse(BaseModel):
    data_points: List[SaciHeatmapDataPoint]

# IARA Heatmap
class IaraHeatmapDataPoint(BaseModel):
    geolocalizacao: Tuple[float, float] = Field(..., example=(-20.0000, -44.0000))
    risco_epidemiologico_score: float = Field(..., example=0.65, ge=0.0, le=1.0)
    patogeno_predominante: Optional[str] = Field(None, example="Influenza A")
    velocidade_propagacao_estimada: Optional[str] = Field(None, example="moderada")


class IaraHeatmapResponse(BaseModel):
    data_points: List[IaraHeatmapDataPoint]

# 4. DependencyGraphResponse Model (NodeData sub-models need careful alignment with dashboard spec)
class NodeDataInformacoesBasicas(BaseModel):
    nome_ativo: str = Field(..., alias="nome", example="Hospital Central de BH") # Matching dashboard spec
    tipo_ativo: str = Field(..., alias="tipo", example="Hospital")
    localizacao_geografica: Union[Tuple[float, float], str] = Field(..., alias="coordenadas", example=(-19.9167, -43.9459))
    codigo_ativo: Optional[str] = Field(None, alias="codigo", example="HOSP-BH-001")


class NodeDataStatusOperacional(BaseModel):
    estado_atual: str = Field(..., example="Operacional") # e.g., "Operacional", "Alerta Gerador", "Falha"
    ultima_manutencao: Optional[datetime] = Field(None)
    proxima_manutencao_agendada: Optional[datetime] = Field(None)
    capacidade_operacional_percentual: Optional[float] = Field(None, example=95.5)
    # Custom fields from example
    energia: Optional[str] = Field(None, example="Estável (Rede Principal)")
    agua: Optional[str] = Field(None, example="Estável")
    telecomunicacoes: Optional[str] = Field(None, example="Operacional com redundância")
    equipamentos_criticos: Optional[str] = Field(None, example="Todos operacionais")


class NodeDataDependencias(BaseModel):
    dependencias_diretas_resumidas: Optional[List[str]] = Field(None, example=["SUB-ENERGIA-003", "GERADOR-HOSP-01"])
    # Detailed dependencies from example
    energia: Optional[List[Dict[str,str]]] = Field(None, example=[{"fonte_principal": "Subestação Vila Madalena"}, {"backup_nivel1": "Gerador diesel 2000kVA"}])
    agua: Optional[List[Dict[str,str]]] = Field(None, example=[{"fonte_principal": "Reservatório Consolação"}])
    telecomunicacoes: Optional[List[Dict[str,str]]] = Field(None, example=[{"internet_principal": "Fibra óptica Vivo"}])


class NodeDataImpactoFalha(BaseModel):
    risco_impacto_falha: Optional[str] = Field(None, example="Crítico") # e.g., "Baixo", "Médio", "Alto", "Crítico"
    populacao_diretamente_afetada: Optional[str] = Field(None, example="500 pacientes internados, 2000 atendimentos/dia")
    servicos_criticos_interrompidos: Optional[List[str]] = Field(None, example=["UTI", "Centro Cirúrgico"])
    tempo_backup_disponivel: Optional[Dict[str, str]] = Field(None, example={"energia_gerador": "8 horas", "agua_reservatorio": "24 horas"})

class NodeData(BaseModel):
    # Matching the structure from docs/DASHBOARD_SPECIFICATIONS.md (section 2.2 "Informações Detalhadas por Nó")
    informacoes_basicas: Optional[NodeDataInformacoesBasicas] = None
    status_operacional: Optional[NodeDataStatusOperacional] = None
    dependencias_diretas: Optional[NodeDataDependencias] = Field(None, alias="dependencias_diretas_detalhadas") # Alias if needed for clarity
    impacto_falha: Optional[NodeDataImpactoFalha] = None
    # Adding fields from the direct `data` object in API spec
    dependencias_diretas_resumidas: Optional[List[str]] = Field(None, description="Simplified list of direct dependency IDs")
    capacidade_operacional_percentual: Optional[float] = Field(None, ge=0.0, le=100.0)
    risco_impacto_falha: Optional[str] = Field(None, description="Overall failure impact risk")


class GraphNode(BaseModel):
    id: str = Field(..., example="HOSP-BH-001")
    label: str = Field(..., example="Hospital Central")
    type: str = Field(..., example="Hospital")
    data: NodeData

class GraphEdge(BaseModel):
    source: str = Field(..., example="HOSP-BH-001") # ID of source node
    target: str = Field(..., example="SUB-ENERGIA-003") # ID of target node
    type: str = Field(..., example="Dependência Elétrica Crítica") # Description of the relationship
    data: Optional[Dict[str, Any]] = Field(None, example={"latencia_impacto_horas": 0.1, "forca_dependencia_score": 0.9})

class DependencyGraphResponse(BaseModel):
    nodes: List[GraphNode]
    edges: List[GraphEdge]

# 7. CorrelatedEventTimelineResponse Model
class TimelineEvent(BaseModel):
    event_id: str # Matching dashboard spec
    timestamp: datetime
    subsistema_origem: str = Field(..., alias="subsistema") # Matching dashboard spec
    tipo_ameaca: str = Field(..., alias="tipo") # Matching dashboard spec
    descricao_curta: str = Field(..., alias="descricao")
    severidade: str
    localizacao_geografica: Optional[Union[Tuple[float, float], str]] = Field(None, alias="localizacao")


class PropagationStep(BaseModel):
    event_id: str
    timestamp: datetime
    subsistema_origem: str = Field(..., alias="subsistema")
    tipo_ameaca: str = Field(..., alias="tipo")
    descricao_curta: str = Field(..., alias="descricao")
    severidade: str
    localizacao_geografica: Optional[Union[Tuple[float, float], str]] = Field(None, alias="localizacao")
    correlacao_com_anterior: Dict[str, str] = Field(..., example={"tipo_link": "causal", "descricao_link": "Queda de energia causou falha de comunicação"})
    informacoes_tecnicas_link: Optional[str] = Field(None, example="/api/v1/events/evt_power_fail_002/details")


class ResolutionInfo(BaseModel):
    status_resolucao: str = Field(..., example="Resolvido")
    proximos_passos_sugeridos: Optional[str] = Field(None)
    timestamp_ultima_acao_relevante: datetime = Field(..., alias="timestamp")
    # Adding fields from dashboard spec example for "resolucao"
    acao_coordenada: Optional[str] = Field(None, example="Ativação protocolo recuperação distribuída")
    subsistemas_envolvidos: Optional[List[str]] = Field(None, example=["CURUPIRA", "BOITATA", "ANHANGA"])
    tempo_total_evento: Optional[str] = Field(None, example="5h 30min")


class CorrelatedScenario(BaseModel):
    scenario_id: str
    scenario_title: Optional[str] = Field(None, example="Cascata de Falha Elétrica na Zona Oeste")
    evento_inicial: TimelineEvent
    propagacao_eventos: List[PropagationStep] = Field(default_factory=list, alias="propagacao")
    resolucao_estimada_ou_atual: Optional[ResolutionInfo] = Field(None, alias="resolucao")


class CorrelatedEventTimelineResponse(BaseModel):
    scenarios: List[CorrelatedScenario]

# Dashboard-specific Response Models

class DashboardThreatEvent(ThreatEventResponse):
    """Extended threat event model with dashboard-specific visualization fields."""
    display_color: str = Field(..., example="#F44336", description="Hex color for map visualization")
    icon_type: str = Field(..., example="fire", description="Icon identifier for event type")
    priority_score: float = Field(..., example=0.85, description="Priority score for ordering (0.0-1.0)")
    formatted_severity: str = Field(..., example="ALTO", description="Human-readable severity level")
    estimated_impact_radius_km: Optional[float] = Field(None, example=2.5, description="Estimated impact radius in kilometers")

class MapInfrastructurePoint(BaseModel):
    """Infrastructure point for map overlay layers."""
    id: str = Field(..., example="HOSP-SP-001")
    name: str = Field(..., example="Hospital das Clínicas")
    type: str = Field(..., example="hospital")
    location: Tuple[float, float] = Field(..., example=(-23.5505, -46.6333))
    status: str = Field(..., example="operational")
    capacity_info: Optional[Dict[str, Any]] = Field(None, example={"beds_available": 50, "icu_capacity": 20})

class MapLayersResponse(BaseModel):
    """Response for map infrastructure layers."""
    layer_type: str = Field(..., example="hospitais")
    points: List[MapInfrastructurePoint]
    last_updated: datetime = Field(default_factory=datetime.utcnow)

class SubsystemOverviewKpi(BaseModel):
    """Individual KPI for subsystem overview."""
    name: str = Field(..., example="Taxa de Detecção")
    value: str = Field(..., example="94.2%")
    trend: str = Field(..., example="improving", description="stable, improving, degrading")
    trend_percentage: Optional[float] = Field(None, example=2.3, description="Percentage change")
    target_value: Optional[str] = Field(None, example="95%", description="Target/goal value")

class EnhancedSystemStatusResponse(SystemStatusResponse):
    """Enhanced system status with additional dashboard metrics."""
    global_threat_level: str = Field(..., example="ELEVATED", description="Overall threat assessment")
    response_time_avg_minutes: float = Field(..., example=4.2, description="Average response time")
    system_efficiency_score: float = Field(..., example=0.92, description="Overall efficiency (0.0-1.0)")
    resource_utilization: Dict[str, float] = Field(..., example={"cpu": 0.65, "memory": 0.73, "network": 0.45})
    predictions_accuracy: float = Field(..., example=0.89, description="ML model accuracy (0.0-1.0)")

class AlertDashboard(BaseModel):
    """Alert model optimized for dashboard display."""
    alert_id: str = Field(..., example="ALT-2025060601-001")
    event_id: Optional[str] = Field(None, example="SACI-2025060601-001")
    title: str = Field(..., example="Risco Alto de Incêndio Detectado")
    description: str = Field(..., example="Condições climáticas extremas na região do Parque Ibirapuera")
    priority_level: str = Field(..., example="HIGH")
    subsystem_source: str = Field(..., example="SACI")
    timestamp: datetime
    status: str = Field(..., example="ACTIVE", description="ACTIVE, ACKNOWLEDGED, RESOLVED")
    assigned_to: Optional[str] = Field(None, example="Corpo de Bombeiros SP")
    estimated_resolution_time: Optional[str] = Field(None, example="15 minutos")
    action_buttons: List[Dict[str, str]] = Field(default_factory=list, example=[
        {"label": "Escalar", "action": "escalate", "style": "warning"},
        {"label": "Resolver", "action": "resolve", "style": "success"}
    ])

class ActiveAlertsResponse(BaseModel):
    """Response for active alerts dashboard."""
    alerts: List[AlertDashboard]
    total_count: int
    count_by_priority: Dict[str, int] = Field(..., example={"CRITICAL": 2, "HIGH": 5, "MEDIUM": 12, "LOW": 8})
    count_by_subsystem: Dict[str, int] = Field(..., example={"SACI": 8, "CURUPIRA": 3, "IARA": 4, "BOITATA": 6, "ANHANGA": 2})

class PerformanceMetrics(BaseModel):
    """System performance metrics for dashboard."""
    latency_ms: Dict[str, float] = Field(..., example={"avg": 45.2, "p95": 120.5, "p99": 250.8})
    throughput_events_per_second: float = Field(..., example=1250.5)
    error_rate_percentage: float = Field(..., example=0.12)
    uptime_percentage: float = Field(..., example=99.94)
    resource_usage: Dict[str, float] = Field(..., example={"cpu": 65.2, "memory": 73.1, "disk": 45.8, "network": 23.4})
    ml_model_performance: Dict[str, float] = Field(..., example={"accuracy": 94.2, "precision": 92.8, "recall": 96.1})

class CapacityAnalysis(BaseModel):
    """Capacity analysis for system planning."""
    current_capacity_usage: Dict[str, float] = Field(..., example={"events_processing": 0.65, "storage": 0.78, "compute": 0.72})
    projected_capacity_6months: Dict[str, float] = Field(..., example={"events_processing": 0.85, "storage": 0.92, "compute": 0.89})
    scaling_recommendations: List[str] = Field(..., example=["Adicionar 2 instâncias de processamento", "Expandir storage em 500GB"])
    bottlenecks_identified: List[str] = Field(..., example=["Processamento de eventos SACI", "Consultas ao grafo BOITATÁ"])

class SubsystemSpecializedOverview(BaseModel):
    """Base model for specialized subsystem overviews."""
    subsystem_name: str = Field(..., example="SACI")
    operational_status: str = Field(..., example="OPERATIONAL")
    main_kpis: List[SubsystemOverviewKpi]
    alerts_summary: Dict[str, int] = Field(..., example={"active": 3, "resolved_today": 12, "pending_review": 1})
    recent_activities: List[str] = Field(..., example=["Novo sensor instalado em Campinas", "Manutenção preventiva concluída"])
    specialized_metrics: Dict[str, Any] = Field(..., description="Subsystem-specific metrics")

class SaciSpecializedOverview(SubsystemSpecializedOverview):
    """SACI-specific dashboard overview."""
    fire_risk_index_national: float = Field(..., example=0.73, description="National fire risk index (0.0-1.0)")
    active_fire_incidents: int = Field(..., example=5)
    sensors_operational: int = Field(..., example=1247)
    sensors_total: int = Field(..., example=1280)
    weather_stations_active: int = Field(..., example=156)
    high_risk_regions: List[str] = Field(..., example=["Pantanal Sul", "Cerrado Central", "Mata Atlântica SP"])
    prediction_accuracy_7days: float = Field(..., example=0.89)

class CurupiraSpecializedOverview(SubsystemSpecializedOverview):
    """CURUPIRA-specific dashboard overview."""
    threat_level_cyber: str = Field(..., example="MEDIUM")
    threat_level_physical: str = Field(..., example="LOW")
    intrusion_attempts_blocked_24h: int = Field(..., example=1834)
    vulnerabilities_detected: int = Field(..., example=12)
    vulnerabilities_patched: int = Field(..., example=8)
    security_score: float = Field(..., example=0.91, description="Overall security score (0.0-1.0)")
    monitored_assets: int = Field(..., example=15420)

class IaraSpecializedOverview(SubsystemSpecializedOverview):
    """IARA-specific dashboard overview."""
    epidemiological_alert_level: str = Field(..., example="NORMAL")
    active_outbreaks: int = Field(..., example=2)
    hospitals_monitored: int = Field(..., example=1156)
    icu_capacity_national: float = Field(..., example=0.67, description="National ICU occupancy (0.0-1.0)")
    disease_surveillance_score: float = Field(..., example=0.88)
    vaccination_coverage_target: float = Field(..., example=0.85)
    health_data_sources_active: int = Field(..., example=2890)

class BoitataSpecializedOverview(SubsystemSpecializedOverview):
    """BOITATÁ-specific dashboard overview."""
    infrastructure_health_score: float = Field(..., example=0.91, description="Overall infrastructure health (0.0-1.0)")
    energy_grid_stability: str = Field(..., example="STABLE")
    water_system_status: str = Field(..., example="OPERATIONAL")
    telecom_network_status: str = Field(..., example="OPERATIONAL")
    critical_failures_24h: int = Field(..., example=0)
    maintenance_overdue: int = Field(..., example=3)
    redundancy_level: float = Field(..., example=0.94, description="System redundancy level (0.0-1.0)")

class AnhangaSpecializedOverview(SubsystemSpecializedOverview):
    """ANHANGÁ-specific dashboard overview."""
    emergency_comms_status: str = Field(..., example="FULLY_OPERATIONAL")
    network_coverage_percentage: float = Field(..., example=98.7)
    avg_latency_ms: float = Field(..., example=23.4)
    backup_systems_ready: int = Field(..., example=12)
    emergency_protocols_active: int = Field(..., example=0)
    interoperability_score: float = Field(..., example=0.93, description="Cross-system communication score")
    satellite_links_operational: int = Field(..., example=8)

class PropagationAnalysisResponse(BaseModel):
    """Detailed propagation analysis for event scenarios."""
    scenario_id: str
    analysis_timestamp: datetime = Field(default_factory=datetime.utcnow)
    propagation_type: str = Field(..., example="cascading_failure")
    root_cause_analysis: Dict[str, str] = Field(..., example={
        "primary_cause": "Sobrecarga na subestação central",
        "contributing_factors": "Alta demanda energética + manutenção adiada",
        "trigger_event": "Falha em transformador principal"
    })
    impact_assessment: Dict[str, Any] = Field(..., example={
        "affected_population": 45000,
        "critical_services_impacted": ["Hospital Regional", "Centro de Emergência"],
        "estimated_recovery_time": "4-6 horas",
        "economic_impact_estimate": "R$ 2.3M"
    })
    prevention_recommendations: List[str] = Field(..., example=[
        "Implementar monitoramento preditivo de transformadores",
        "Estabelecer protocolo de load balancing automático",
        "Acelerar cronograma de manutenção preventiva"
    ])
    lessons_learned: List[str] = Field(..., example=[
        "Necessidade de maior redundância na zona central",
        "Protocolos de comunicação precisam ser mais rápidos"
    ])

class RealtimeUpdateMessage(BaseModel):
    """WebSocket message format for real-time dashboard updates."""
    message_type: str = Field(..., example="threat_event_new")
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    subsystem_source: str = Field(..., example="SACI")
    priority_level: str = Field(..., example="HIGH")
    data: Dict[str, Any] = Field(..., description="Message-specific data payload")
    requires_ui_refresh: bool = Field(..., example=True, description="Whether UI should refresh affected components")
    affected_components: List[str] = Field(..., example=["threat_map", "alert_center", "saci_overview"])

# Response wrapper for caching and metadata
class CachedDashboardResponse(BaseModel):
    """Wrapper for dashboard responses with caching metadata."""
    data: Dict[str, Any] = Field(..., description="Actual response data")
    cache_metadata: Dict[str, Any] = Field(..., example={
        "cached_at": "2025-06-06T10:30:00Z",
        "expires_at": "2025-06-06T10:35:00Z",
        "cache_key": "dashboard_threat_map_1h",
        "refresh_interval_seconds": 300
    })
    visualization_hints: Dict[str, Any] = Field(default_factory=dict, example={
        "color_scheme": "threat_levels",
        "default_zoom_level": 10,
        "auto_refresh_enabled": True
    })
